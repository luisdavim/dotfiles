# vim:set filetype=bash:
# Kubectl aliases

[ -f ${HOME}/.ktx ] && source ${HOME}/.ktx/ktx
[ -f $HOME/.kbenv/kbenv.sh ] && source $HOME/.kbenv/kbenv.sh
[ -f $HOME/.helmenv/helmenv.sh ] && source $HOME/.helmenv/helmenv.sh
[ -f ${HOME}/.kube-fzf/kube-fzf.sh ] && source ${HOME}/.kube-fzf/kube-fzf.sh
[ -f ${HOME}/.fubectl/fubectl.source ] && source ${HOME}/.fubectl/fubectl.source

[ -f ~/.kubectl_aliases/.kubectl_aliases ] && source ~/.kubectl_aliases/.kubectl_aliases
# to use GNU watch command instead of kubectl [...] --watch
# [ -f ~/.kubectl_aliases/.kubectl_aliases ] && source <(cat ~/.kubectl_aliases/.kubectl_aliases | sed -r 's/(kubectl.*) --watch/watch \1/g')
# to print the full command before running it
# function kubectl() { echo "+ kubectl $@">&2; \kubectl $@; }

function kctl() {
  local CMD="${1}"
  if [ ${#} -gt 0 ]; then
    shift
  fi
  if _isFunction "kubectl-${CMD}"; then
    "kubectl-${CMD}" "${@}"
    return $?
  fi
  COLOR="command"
  if [ -x "$(command -v grc)" ]  && [[ ',modify-secret,edit,exec,ssh,access-matrix,shell,remote_shell,debug,ephemeral,' != *",${CMD},"* ]]; then
    COLOR="grc -es --colour=auto"
  fi
  local args=(${COLOR} kubectl ${CMD})
  for arg in "${@}"; do
    args+=( "$(printf '%q' "$arg")" )
  done
  eval "${args[*]}"
}

alias k='kctl'
alias kga='kctl get -A'
alias kd='kctl describe'
alias kvs='kctl view-secret'
alias keds='kctl modify-secret'
alias ked='kctl edit'
alias krr='kctl rollout restart'
alias ktop='kctl top'
alias kdrain='kctl drain --ignore-daemonsets --delete-emptydir-data'
alias kubectl='kctl'

alias kube='kubectl'
alias kns='kubens'
alias kc='kubectl'
alias krew='kubectl krew'
alias kindenv='export KUBECONFIG=~/.kube/kind-config'

# alias k='kubectl "--context=${KUBECTL_CONTEXT:-$(kubectl config current-context)}" ${KUBECTL_NAMESPACE/[[:alnum:]-]*/--namespace=${KUBECTL_NAMESPACE}}'
# alias kubectl="kubectl --context \${KUBE_CONTEXT:-\$(\kubectl config current-context)}"

# generate aliases for each context
if [ -d ~/.kube/config.d ]; then
  for CTX in $(find ~/.kube/config.d/ -type f -printf "%f\n"); do
    local cmd="alias k8s-${CTX/#${USER}-}='kubectl --kubeconfig ${HOME}/.kube/config.d/${CTX}'"
    eval "${cmd}"
    local cmd="alias helm-${CTX/#${USER}-}='helm --kubeconfig ${HOME}/.kube/config.d/${CTX}'"
    eval "${cmd}"
  done
fi

if [ -f ~/.kube/config ]; then
  for CTX in $(\kubectl config get-contexts -o name); do
    local cmd="alias k8s-${CTX/#${USER}-}='kubectl --kubeconfig ${HOME}/.kube/config --context ${CTX}'"
    eval "${cmd}"
    local cmd="alias helm-${CTX/#${USER}-}='helm --kubeconfig ${HOME}/.kube/config --context ${CTX}'"
    eval "${cmd}"
  done
fi

function kgy() {
  \kubectl get ${@} -o yaml | bat --paging never --theme ${BAT_THEME:-TwoDark} -p -l yaml
}

function kgj() {
  \kubectl get ${@} -o json | bat --paging never --theme ${BAT_THEME:-TwoDark} -p -l json
}

function kubectl-printenv() {
  \kubectl exec ${@} -- strings /proc/1/environ
}
alias kprintenv='kubectl-printenv'
alias kpe='kubectl-printenv'

function kubectl-diff() {
  \kubectl diff ${@} | delta -s
}
alias kdiff='kubectl-diff'

function kubectl-getNotReady(){
  local filter='.items[]| select(.status != null)|select(.status.conditions[] != null)|select([.status.conditions[]|select(.type == "Ready" and .status == "False")]|length == 1)'
  local table="([\"NAMESPACE\",\"NAME\"] | (., map(length*\"-\"))),(${filter} | [.metadata.namespace, .metadata.name]) | @tsv"
  \kubectl get ${@} -o json | jq -r "${table}"
}
alias kgnr='kctl getNotReady'

function kubectl-leader() {
  \kubectl -n kube-system get ep kube-scheduler -o json | jq -r '.metadata.annotations."control-plane.alpha.kubernetes.io/leader"' | jq -r '.holderIdentity' | cut -d_ -f1
}

function kubectl-leaders() {
  \kubectl get leases -n kube-system -oyaml | yq '.items[]|[{"name": .metadata.name, "leader": .spec.holderIdentity}]'
}

function kubectl-default-ingressclass() {
  \kubectl get ingressclass -o yaml | yq '.items[]|select(.metadata.annotations."ingressclass.kubernetes.io/is-default-class" == "true")'
}
alias kgdic='kubectl-default-ingressclass'

function kubectl-missing-ds-pods() {
  \kubectl get no --no-headers | \grep -v -f <(\kubectl get po -owide -A --no-headers | grep "${1}" | awk '{print $8}' | grep -v '<none>')
}
alias kgmdsp='kubectl-missing-ds-pods'

function kubectl-get-all() {
  local args=( "$@" )
  local namespaced='true'
  if [ $# -eq 0 ]; then
    namespaced='false'
    args+=( '-A' )
  fi
  \kubectl api-resources --verbs=list --namespaced="${namespaced}" -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found ${args[@]}
}
alias kgaa='kubectl-get-all'

function kubectl-events() {
  local filter=""
  if [ -n "$1" ]; then
    filter="--field-selector involvedObject.name=${@}"
  fi
  kubectl get event ${filter}
}
alias kctl-events='kubectl-events'

function kubectl-parallel() {
  KFG_DIR=${KFG_DIR:-~/.kube/config.d}

  local args=()
  local cmd="kubectl"
  local follow="false"
  while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    -f | --follow)
      follow="true"
      shift
      ;;
    -c | --command)
      cmd="$2"
      shift 2
      ;;
    --)
      shift
      args+="${@}"
      break
      ;;
    *)
      args+=("$1")
      shift
      ;;
    esac
  done

  ctxs=$(kubectl-get-ctx "${args[1]}")
  args[1]="${cmd}"

  echo -e "Running:\n\t${args}\non:\n${ctxs}\n---"
  echo -n "Are you sure? [y/N] "
  read REPLY
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    return
  fi
  echo ""

  suffix="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')"
  if [[ "${follow}" == "true" ]] && [ -x "$(command -v multitail)" ] && [ -n "$TMUX" ]; then
    echo "${ctxs}" | xargs -P 10 -I {} touch /tmp/{}-${suffix}.kout
    tmux split-window "multitail -f /tmp/*-${suffix}.kout"
  fi

  echo "${ctxs}" | xargs -P 10 -I {} -r -- sh -c 'export KUBECONFIG=${1}/{}; out="/tmp/{}-${2}.kout"; shift 2; eval "( ${*} ) > ${out} 2>&1"' -- "${KFG_DIR}" "${suffix}" "${args}"

  # if using gnu parallel, you can live tail the outputs with the following:
  # parallel --tagstring "{}:" --line-buffer tail -f {} ::: /tmp/*.kout
  # or with multitail
  # multitail -f /tmp/*.kout

  for f in ${ctxs}; do
    echo ">> $f"
    cat "/tmp/${f}-${suffix}.kout"
    echo "---"
  done

  rm -f /tmp/*-${suffix}.kout
}
alias kparallel='kubectl-parallel'
alias hparallel='kubectl-parallel -c helm'

function kubectl-get-ctx() {
  KFG_DIR=${KFG_DIR:-~/.kube/config.d}
  if [ -d "${KFG_DIR}" ] && [[ "$KUBECONFIG" != "~/.kube/config" ]]; then
    if [[ "${1}" == "-z" ]]; then
      shift
      find "${KFG_DIR}/" -type f -printf "%f\n" | fzf --filter="${1}"
    else
      find "${KFG_DIR}/" -type f -regex ".*${1}.*" -printf "%f\n"
    fi
    return
  fi

  if [[ "${1}" == "-z" ]]; then
    shift
    \kubectl config get-contexts -o name | fzf --filter="${1}"
  else
    re=$(sed 's/[.$]/[&]/g; s/?/./g; s/\*/.*/g; s/\^/\\^/g' <<<"$1")
    \kubectl config get-contexts -o name | grep "${re}"
  fi
}

function kubectl-ctx() {
  if [[ "${1}" == "kind" ]]; then
    export KUBECONFIG=~/.kube/kind-config
    return
  fi
  if [[ "${1}" == '-l' ]]; then
    shift
    kubectl-get-ctx -z "${1}"
    return
  fi
  KFG_DIR=${KFG_DIR:-~/.kube/config.d}
  if [ -d "${KFG_DIR}" ] && [[ "$KUBECONFIG" != "~/.kube/config" ]]; then
    if [ -n "$1" ] && [ -f "${KFG_DIR}/${1}" ]; then
      export KUBECONFIG="${KFG_DIR}/${1}"
      return
    fi
    # files=$(find "${KFG_DIR}/" -type f -name "*${1}*" -printf "%f\n")
    files=$(ls -1 "${KFG_DIR}/" | fzf --filter="${1}")
    l=$(echo -n "${files}" | grep -c '^')
    if [ $l -eq 0 ]; then
      echo "no matching context found"
      return
    fi
    if [ $l -eq 1 ]; then
      export KUBECONFIG="${KFG_DIR}/${files}"
      return
    fi
    CTX=$(echo -n "${files}"| fzf)
    if [ ! -f "${KFG_DIR}/${CTX}" ]; then
      echo "no matching context found"
      return
    fi
    export KUBECONFIG="${KFG_DIR}/${CTX}"
    return
  fi
  kubectx "${@}"
}
alias kctx='kubectl-ctx'

function kubectl-cfg() {
  KFG=${KUBECONFIG:-~/.kube/config}
  KFG_DIR=${KFG_DIR:-~/.kube/config.d}
  case "$1" in
    split)
      mkdir -p "${KFG_DIR}"
      for ctx in $(\kubectl --kubeconfig="${KFG}" config get-contexts -o name); do
        \kubectl --kubeconfig="${KFG}" config view --minify --flatten --raw --context=${ctx} > "${KFG_DIR}/${ctx}"
      done
      chmod 600 "${KFG_DIR}"/*
      rename -f 's/:/./g' "${KFG_DIR}"/*
      if [[ "$2" == "-p" ]] || [[ "$2" == "--purge" ]]; then
        rm "${KFG}"
      fi
      ;;
    merge)
      DST=${3:-~/.kube/config}
      if [ -z "$2" ]; then
        echo 'Usage:'
        echo -e '\tkcfg merge <source_cfg> [<dest_cfg>]'
        echo -e '\tuse "all" as source_cfg to merge all configuration files'
        return 1
      fi
      if [[ "$2" == "all" ]]; then
        for CTX in $(ls -1 ${KFG_DIR}); do
          KUBECONFIG="${DST}:${KFG_DIR}/${CTX}" \kubectl config view --flatten --raw >> ${DST}
        done
      else
        KUBECONFIG="${DST}:${2}" \kubectl config view --flatten --raw >> ${DST}
      fi
      ;;
    *)
      echo -e "Unknown command!\n  Available commands are:"
      echo -e " split\tSplit ${KFG} into separate files under ${KFG_DIR}/ (-p to delete ${KFG} in the end)"
      echo -e " merge\tMerge two kubectl config files (kcfg merge <source_cfg> [<dest_cfg>])"
      ;;
  esac
}
alias kcfg='kubectl-cfg'

# used to set the Prometheus host for kptop
function kpctx() {
  export KPTOP_PROMETHEUS_SERVER="https://$(\kubectl get ingress -A | awk '/prom|thanos/ { if ($4 ~ "prom|thanos") print $4}' | fzf --filter="${1}" | fzf)"
}

function kubectl-enter() {
  command kubectl exec -ti "${@}" -- sh
}
alias kctl-enter='kubectl-enter'

function kexec(){ pod=$1; shift; \kubectl exec -it $pod -- $@; }
alias kctl-exec='kexec'

function krun() { name=$1; shift; image=$1; shift; \kubectl run -it --generator=run-pod/v1 --image $image $name -- $@; }
alias kctl-run='krun'

function kubectl-remote_shell() {
  command kubectl run "${@}" --restart=Never --rm -i --tty debug --image=ghcr.io/luisdavim/debug:main -- sh
}
alias kctl-shell='kubectl-remote_shell'
alias kube-shell='kubectl-remote_shell'
alias kshell='kubectl-remote_shell'

function kubectl-node_shell() {
  command kubectl debug "node/${@}" -it --image=ghcr.io/luisdavim/debug:main -- chroot /host
  command kubectl killall node-debugger
}
alias kctl-node-shell='kubectl-node_shell'
alias kube-node-shell='kubectl-node_shell'

alias kssh='kubectl-ssh'
alias kpssh='kubectl-pssh'

function kubectl-ingress-nslookup() {
  for name in $(kubectl get ingress "${@}" | awk -F '[[:space:]]+' '{$0=$4;sub(/,/,"\n");print}'); do
    dig +noall +answer "$name"
  done
}

function kubectl-purge_crd() {
  if [ -z "${1}" ]; then
    echo 'please provide a CRD name'
    return
  fi
  \kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r \kubectl patch -p '{"metadata":{"finalizers": []}}' --type=merge ${1};
  \kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r \kubectl delete ${1};
  \kubectl api-resources -o name | grep "${1}" | awk '{print $1}' | xargs -r \kubectl delete crd
}
alias kctl-clean_crd='kubectl-purge_crd'

alias kctl-list_images='kubectl get pods --all-namespaces -o jsonpath="{..image}" | tr -s "[[:space:]]" "\n" | sort | uniq -c'
alias kctl-drain='kubectl drain --delete-local-data --ignore-daemonsets'
alias kctl-httpie='kubectl run --restart=Never --rm -i --tty httpie-tmp --image=alpine/httpie'

# Helm aliases
alias hup='helm upgrade --install --atomic --cleanup-on-fail'
alias hls='helm list -a'
alias hla='helm list -aA'
alias hga='helm get all'
alias hgav='helm get values --all'
alias hgv='helm get values'
alias hgh='helm get hooks'
alias hsa='helm show all'
alias hdel='helm delete'
alias hrm='helm delete'
alias hrb='helm-rollback'
alias hhist='helm history'
alias htpl='helm template'
alias htp='helm template'

alias helm-plugin-update='helm plugin list | awk '\''!/NAME/ {print $1}'\'' | xargs -L 1 -r helm plugin update'

function helm-clean() {
  NS=${1:-kube-system}
  if [[ "${NS}" == "all" ]]; then
    NS=$(\kubectl get ns --no-headers -o custom-columns='NAME:.metadata.name')
  fi
  for N in ${NS}; do
    echo "Looking for ConfigMaps in ${N}:"
    \kubectl delete cm -n ${N} -l 'owner=helm' -l 'status in (failed,superseded,deleted)'
    echo "Looking for Secrets in ${N}:"
    \kubectl delete secrets -n ${N} -l 'owner=helm' -l 'status in (failed,superseded,deleted)'
  done
}

function helm-getSecrets() {
  HELM_HOME="${HELM_HOME:-~/.helm}"
  \kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "ca.crt"| base64decode}}' > $HELM_HOME/ca.pem
  \kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "tls.crt"| base64decode}}' > $HELM_HOME/cert.pem
  \kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "tls.key"| base64decode}}' > $HELM_HOME/key.pem
}

function helmsman-adopt() {
  \kubectl label secret -n ${2} -l name=${1} --overwrite HELMSMAN_CONTEXT=${3:-default} MANAGED-BY=HELMSMAN NAMESPACE=${2}
}

function helm-adopt() {
  \kubectl annotate ${3} ${4} -n ${2} meta.helm.sh/release-name=${1} meta.helm.sh/release-namespace=${2} --overwrite
  \kubectl label ${3} ${4} -n ${2} app.kubernetes.io/managed-by=Helm --overwrite
}

# Minikube
function mk() {
  export KUBECONFIG=~/.kube/config.d/minikube
  case "$1" in
    start)
      shift
      minikube start --driver=hyperkit --container-runtime=docker "${@}"
      eval $(minikube docker-env)
      ;;
    purge)
      minikube delete --all --purge
      ;;
    *)
      minikube "${@}"
  esac
}

# microk8s aliases for macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias microk8s.install='multipass exec microk8s-vm -- sudo snap install microk8s --classic && multipass exec microk8s-vm -- sudo iptables -P FORWARD ACCEPT'
  alias microk8s.setup='multipass exec microk8s-vm -- /snap/bin/microk8s.enable dns storage ingress metrics-server dashboard registry'
  alias microk8s.new='multipass launch --name microk8s-vm --mem 4G --disk 40G && microk8s.install && microk8s.setup'
  alias microk8s.start='multipass start microk8s-vm'
  alias microk8s.stop='multipass stop microk8s-vm'
  alias microk8s.delete='multipass delete microk8s-vm && multipass purge'
  alias microk8s.ip='multipass list | grep microk8s-vm | awk '\''{print $3}'\'''
  alias microk8s.shell='multipass shell microk8s-vm'
  alias microk8s.status='multipass exec microk8s-vm -- /snap/bin/microk8s.status'
  alias microk8s.enable='multipass exec microk8s-vm -- /snap/bin/microk8s.enable'
  alias microk8s.config='multipass exec microk8s-vm -- /snap/bin/microk8s.config'
  alias microk8s.docker='multipass exec microk8s-vm -- /snap/bin/microk8s.docker'
  alias microk8s.kubectl='multipass exec microk8s-vm -- /snap/bin/microk8s.kubectl'
fi

# Velero aliases
alias velero='\kubectl exec -it -n velero ${VELRO:-$(\kubectl get pods -n velero | grep velero | awk '\''{ print $1}'\'')} -- /velero'

# Gardener aliases
alias gctl='gardenctl'
alias gk='gardenctl kubectl --'

# Target a shoot in a graden
# shoot <garden> <shoot>
function shoot() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      shoot ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls shoots;;
    *)
      export $(gardenctl target shoot ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function seed() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      seed ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls seeds;;
    *)
      export $(gardenctl target seed ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function garden() {
  case ${1} in
    "ls") gardenctl ls gardens;;
    *)
      export $(gardenctl target garden ${1})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}
