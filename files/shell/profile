# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

if [[ "$CONFIGURED" == "true" ]]; then
  return
fi

[ -f ${HOME}/.variables ] && source ${HOME}/.variables
[ -f ${HOME}/.variables.local ] && source ${HOME}/.variables.local

#CDPATH
CDPATH=".:${HOME}:${HOME}/workingCopies:${HOME}/workingCopies/src:$(ls -1d ${HOME}/workingCopies/src/*/ | tr '\n' ':')"

if [ -d "/usr/local/sbin" ] ; then
  PATH="/usr/local/sbin:$PATH"
fi

# The following are keg only formulas
if [ -d '/usr/local/opt/binutils/bin' ]; then
  PATH="/usr/local/opt/binutils/bin:$PATH"
fi
if [ -d '/usr/local/opt/curl/bin' ]; then
  PATH="/usr/local/opt/curl/bin:$PATH"
fi
if [ -d '/usr/local/opt/icu4c/bin' ]; then
  PATH="/usr/local/opt/icu4c/bin:$PATH"
fi
if [ -d '/usr/local/opt/libarchive/bin' ]; then
  PATH="/usr/local/opt/libarchive/bin:$PATH"
fi
if [ -d '/usr/local/opt/ncurses/bin' ]; then
  PATH="/usr/local/opt/ncurses/bin:$PATH"
fi
if [ -d '/usr/local/opt/openssl/bin' ]; then
  PATH="/usr/local/opt/openssl/bin:$PATH"
fi
if [ -d '/usr/local/opt/sqlite/bin' ]; then
  PATH="/usr/local/opt/sqlite/bin:$PATH"
fi
if [ -d '/usr/local/opt/libpcap/bin' ]; then
  PATH="/usr/local/opt/libpcap/bin:$PATH"
fi
if [ -d '/usr/local/opt/llvm/bin' ]; then
  PATH="/usr/local/opt/llvm/bin:$PATH"
fi

# Use GNU utils instead of the default ones on MacOS
if [ -d '/usr/local/opt/findutils/libexec/gnubin' ]; then
  PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
fi
if [ -d '/usr/local/opt/coreutils/libexec/gnubin' ]; then
  PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
fi
if [ -d '/usr/local/opt/make/libexec/gnubin' ];then
  PATH="/usr/local/opt/make/libexec/gnubin:$PATH"
fi
if [ -d "/usr/local/opt/gnu-tar/libexec/gnubin" ]; then
  PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
fi
if [ -d '/usr/local/opt/gnu-sed/libexec/gnubin' ]; then
  PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
fi
if [ -d '/usr/local/opt/gnu-getopt/bin' ]; then
  PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
fi
if [ -d '/usr/local/opt/gnu-time/libexec/gnubin' ]; then
  PATH="/usr/local/opt/gnu-time/libexec/gnubin:$PATH"
fi
if [ -d '/usr/local/opt/whois/bin' ]; then
  PATH="/usr/local/opt/whois/bin:$PATH"
fi
if [ -d '/usr/local/opt/gpatch/bin' ]; then
  PATH="/usr/local/opt/gpatch/bin:$PATH"
fi

# Setup Compiler paths for readline and openssl
local READLINE_PATH=$(brew --prefix readline)
local OPENSSL_PATH=$(brew --prefix openssl)
local ZLIB_PATH=$(brew --prefix zlib)
local BZIP2_PATH=$(brew --prefix bzip2)

# export LDFLAGS="${LDFLAGS}  -L$(xcrun --show-sdk-path)/usr/lib"

export LDFLAGS="${LDFLAGS}  -L${ZLIB_PATH}/lib"
export CPPFLAGS="${CPPFLAGS}  -I${ZLIB_PATH}/include"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${ZLIB_PATH}/pkgconfig"

export LDFLAGS="${LDFLAGS}  -L${BZIP2_PATH}/lib"
export CPPFLAGS="${CPPFLAGS}  -I${BZIP2_PATH}/include"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BZIP2_PATH}/pkgconfig"

# export LDFLAGS="${LDFLAGS}  -L$(brew --prefix sqlite)/lib"
# export CPPFLAGS="${CPPFLAGS}  -I$(brew --prefix sqlite)/include"
# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  $(brew --prefix sqlite)/lib/pkgconfig"

export LDFLAGS="${LDFLAGS}  -L${OPENSSL_PATH}/lib"
export CPPFLAGS="${CPPFLAGS}  -I${OPENSSL_PATH}/include"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${OPENSSL_PATH}/lib/pkgconfig"

export LDFLAGS="${LDFLAGS}  -L${READLINE_PATH}/lib"
export CPPFLAGS="${CPPFLAGS}  -I${READLINE_PATH}/include"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${READLINE_PATH}/lib/readline"

# export LDFLAGS="${LDFLAGS} -L/usr/local/opt/tcl-tk/lib"
# export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/tcl-tk/include"

# export CPPFLAGS="${CPPFLAGS} -I$(xcrun --show-sdk-path)/usr/include"

# export LDFLAGS="${LDFLAGS} -L$(brew --prefix tcl-tk)/lib"
# export CPPFLAGS="${CPPFLAGS} -I$(brew --prefix tcl-tk)/include"
# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} $(brew --prefix tcl-tk)/lib/pkgconfig"
# export CFLAGS="${CFLAGS} -I$(brew --prefix tcl-tk)/include"

# export LDFLAGS="${LDFLAGS}  -L/usr/local/opt/binutils/lib"
# export CPPFLAGS="${LDFLAGS}  -I/usr/local/opt/binutils/include"

export CFLAGS="-Wno-error=implicit-function-declaration"

# Use brew python
if [ -d '/usr/local/opt/python/libexec/bin' ]; then
  PATH="/usr/local/opt/python/libexec/bin:$PATH"
fi

if [[ "$(uname -s)" == "Darwin" ]]; then
  # TODO: cant compile python with homebrew clang
  CC="/Library/Developer/CommandLineTools/usr/bin/clang"
  CXX="/Library/Developer/CommandLineTools/usr/bin/clang++"
  SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
fi

export PYTHON_CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl)"

# export PYTHON_CONFIGURE_OPTS="${PYTHON_CONFIGURE_OPTS} --with-tcltk-includes='-I$(brew --prefix tcl-tk)/include' --with-tcltk-libs='-L$(brew --prefix tcl-tk)/lib -ltcl8.6 -ltk8.6'"

# if [ -x "$(command -v brew)" ]; then
#   if [ -d "$(ls -1d $(brew --prefix)/lib/py*/* | tail -n1)" ]; then
#     PYTHONPATH="$(ls -1d $(brew --prefix)/lib/py*/* | tail -n1)"
#   fi
# #   for P in $(ls -1d $(brew --prefix)/lib/py*/*); do
# #     if [ -z "$PYTHONPATH" ]; then
# #       PYTHONPATH="${P}"
# #     else
# #       PYTHONPATH="${P}:$PYTHONPATH"
# #     fi
# #   done
# fi

# if [ -x "$(command -v pyenv)" ]; then
#   eval "$(pyenv init --path)"
#   eval "$(pyenv init -)"
#   [ -x "$(command -v pyenv-virtualenv-init)" ] && eval "$(pyenv virtualenv-init -)"
# fi

# Use brew ruby
if [ -d '/usr/local/opt/ruby/bin' ]; then
  PATH="/usr/local/opt/ruby/bin:$PATH"
  # LDFLAGS="-L/usr/local/opt/ruby/lib"
  # CPPFLAGS="-I/usr/local/opt/ruby/include"
  # PKG_CONFIG_PATH="/usr/local/opt/ruby/lib/pkgconfig"
fi

if [ -x "$(command -v ruby)" ] && [ -x "$(command -v gem)" ]; then
    PATH="$(ruby -r rubygems -e 'puts Gem.bindir'):$PATH"
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# Use the OpenSSL from Homebrew instead of ruby-build
# Note: the Homebrew version gets updated, the ruby-build version doesn't
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$OPENSSL_PATH"

# Place openssl@1.1 at the beginning of your PATH (preempt system libs)
export PATH=$OPENSSL_PATH/bin:$PATH

# Load rbenv
# eval "$(rbenv init -)"

# Extract the latest version of Ruby so you can do this:
# rbenv install $LATEST_RUBY_VERSION
# export LATEST_RUBY_VERSION=$(rbenv install -L | grep -v - | tail -1)

[ -x ${HOME}/.chefvm/bin/chefvm ] && eval "$(${HOME}/.chefvm/bin/chefvm init -)"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x "$(command -v lesspipe)" ] && eval "$(SHELL=/bin/sh lesspipe)"
[ -x "$(command -v lesspipe.sh)" ] && eval "$(SHELL=/bin/sh lesspipe.sh)"

# Linuxbrew paths
if [ -d "$HOME/.linuxbrew/bin" ]; then
  PATH="$HOME/.linuxbrew/bin:$PATH"
fi
if [ -d "$HOME/.linuxbrew/share/man" ]; then
  MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
fi
if [ -d "$HOME/.linuxbrew/share/info" ]; then
  INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
fi

# K8s stuff
if [ -d "/usr/local/kubebuilder/bin" ]; then
  PATH="$PATH:/usr/local/kubebuilder/bin"
fi

PATH="${KREW_ROOT:-${HOME}/.krew}/bin:$PATH"

# GOPATH
GOPATH="${HOME}/go:${HOME}/workingCopies"
GOBIN="${GOPATH/:*}/bin"
PATH="${PATH}:${GOBIN}"

# Cargo bins
# [ -f ${HOME}/.cargo/env ] && source ${HOME}/.cargo/env
if [ -d "${HOME}/.cargo/bin" ]; then
  PATH="${HOME}/.cargo/bin:$PATH"
fi

if [ -d "${HOME}/.kitty-tmux" ]; then
  PATH="${HOME}/.kitty-tmux:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/.local/bin" ]; then
  PATH="${HOME}/.local/bin:${PATH}"
fi
if [ -d "${HOME}/bin" ] ; then
  PATH="${HOME}/bin:$PATH"
fi

#sledge:binary path
if [ -d "${HOME}/.sledge/bin" ]; then
  SLEDGE_BIN=${HOME}/.sledge/bin
  PATH="${PATH}:${SLEDGE_BIN}"
fi

# Avoid duplicates
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

# if running bash
if [ -n "$BASH_VERSION" ]; then
  # include .bashrc if it exists
  if [ -f "$HOME/.bashrc" ] && [[ "$CONFIGURED" != "true" ]]; then
    . "$HOME/.bashrc"
  fi
fi
