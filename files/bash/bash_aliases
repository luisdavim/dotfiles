# vim:set filetype=sh:

# Extra aliases
for f in $HOME/.bash/aliases.d/*; do
  if [ -f "$f" ]; then
    source "$f"
  fi
done

# enable color support of ls and also add handy aliases
if [ -x "$(command -v dircolors)" ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias watch='watch --color'
fi

# some more ls aliases
if [ -x "$(command -v els)" ]; then
  alias els='els --els-icons=fontawesome'
  # alias ls='els --els-icons=fontawesome'
fi
if [ -x "$(command -v exa)" ]; then
  alias ls='exa'
  alias tree='exa -T'
fi
alias lc='colorls'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lt='ls -lht && echo "------Oldest--"'
alias ltr='ls -lhtr && echo "------Newest--"'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Location aliases
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias back='cd $OLDPWD'

# Grep aliases
alias gr='rg'

alias todos="ack -n --nogroup '(TODO|FIX(ME)?):'"

# Usage: df -h|fawk 2 ; replaces: df -h | awk '{print $2}'
function fawk() {
    first="awk '{print "
    last="}' $2"
    cmd="${first}\$${1}${last}"
    echo $cmd
    eval $cmd
}

# Colored diffs
if [ -x "$(command -v colordiff)" ]; then
  alias diff='colordiff'
fi

# Syntax highlighting in cat and less
# you need Pygments: pip install Pygments
alias colorcat='pygmentize -g'
# or source-highlight: sudo apt install source-highlight
# alias Cat='source-highlight --out-format=esc -o STDOUT -i'
# alias PCat='source-highlight --out-format=esc -o STDOUT'
if [ -x "$(command -v bat)" ]; then
  alias Cat="bat --theme ${BAT_THEME:-DarkNeon}"
  alias cat="bat --theme ${BAT_THEME:-DarkNeon} --plain"
else
  alias Cat='colorcat'
fi

# Colorful less
function cless() {
  if [ $# -eq 0 ]; then
    cat | pygmentize -g | less -R
  else
    pygmentize -f terminal "$1" | less -R
  fi
}

# Screen aliases
alias screen-killall='for sess in $(screen -ls); do $ screen -X -S $sess quit'

# Vagrant aliases
alias vagrant-clean='vagrant nuke && vagrant global-status --prune'

# Gem aliases
# alias gem-upgrade='gem update $(gem list | cut -d\  -f 1)'
alias gem-upgrade='gem update && gem cleanup'

# npm aliases
alias npm-upgrade='npm upgrade -g'

if [[ "$OSTYPE" == *"android"* ]]; then
  alias npm='proot --link2symlink npm'
fi

# Go aliases
function goclean() {
  rm -rf ~/.glide/
  rm -rf ~/go/.cache/
  rm -rf ~/go/pkg/*
  rm -rf ~/go/src/*
  rm -rf ~/.cache/go-build/
}
alias go-clean='goclean'

# Python aliases
alias python='python3'
alias pip='pip3'

# PIP aliases
alias pip-upgrade='(echo pip; pip freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip install -U'
alias pip3-upgrade='(echo pip; pip3 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip3 install -U'
alias pip2-upgrade='(echo pip; pip2 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip2 install -U'
alias pip-clean='rm -rf ~/.cache/pip/'

# apt & brew aliases
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if ! [ -x "$(command -v brew)" ]; then
    alias brew='apt'
  fi

# if user is not root, pass all commands via sudo #
  if [ $(id -u) -ne 0 ]; then
    alias apt='sudo apt'
    alias apt-get='sudo apt-get'
    alias aptitude='sudo aptitude'
    alias gem='sudo -H gem'
    alias pip='sudo -H pip'
  fi

  function apt-cleanup() {
    ls /boot/ | grep vmlinuz | sed 's@vmlinuz-@linux-image-@g' | sed 's@\.efi\.signed@@g' | grep -v $(uname -r) | sort -Vru | tail -n +2 | xargs -r sudo aptitude purge -y
    sudo apt autoremove
    sudo aptitude autoclean
    sudo apt-get clean
    dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge
  }

  alias apt-upgrade='sudo apt update; sudo apt full-upgrade; apt-cleanup'
  alias dist-upgrade=apt-upgrade

elif [[ "$OSTYPE" == "darwin"* ]]; then
  alias apt='brew'
  alias cask='brew cask'
  alias tap='brew tap'
  alias service='brew services'

  brew-cask-upgrade() {
    if [ "$1" != '--continue' ]; then
      echo "Removing brew cache"
      rm -rf "$(brew --cache)"
      echo "Running brew update"
      brew update
    fi
    for c in $(brew cask list); do
      installed=$(ls $(brew --prefix)/Caskroom/$c)
      info=$(brew cask info $c)
      installed_version=$(echo $installed)
      info_version=$(echo $info | grep "$c: " | cut -d ' ' -f2)
      if [[ "$installed_version" != "$info_version" ]]; then
        echo -e "\n\nInstalled versions of $c:"
        echo "$installed"
        echo -e "\nCask info for $c:"
        echo "$info"
        if [ "$1" != '-y' ]; then
          select ynx in "Yes" "No" "Exit"; do
            case $ynx in
              "Yes") echo "Re-installing $c"; brew cask reinstall "$c"; break;;
              "No") echo "Skipping $c"; break;;
              "Exit") echo "Exiting brew-cask-upgrade"; return;;
            esac
          done
        else
          echo -e "${COL_YELLOW}>>>${COL_RESET} Re-installing $c"; brew cask reinstall "$c"
        fi
      else
          echo -e "${COL_BLUE}>>>${COL_RESET} $c is up to date"
      fi
    done
    brew cleanup
  }

  check-keg_only() {
    kegs=$(brew info --installed --json | jq -r 'map(select(.keg_only == true and .linked_keg == null)) | "/usr/local/opt/" + .[].name + "/bin"')
    for keg in $kegs; do
      if ! [[ ":$PATH:" == *":${keg}:"* ]] && [ -d "$keg" ]; then
        echo -e "\n# WARNING: ${keg} is not in your PATH"
        echo '# add the following to your profile to fix it'
        cat << EOF
if [ -d '${keg}' ]; then
  PATH="${keg}:\$PATH"
fi
EOF
      fi
    done
  }

  reload-yabai() {
    # stop, upgrade, start yabai
    brew services stop yabai
    brew upgrade yabai
    brew services start yabai

    # reinstall the scripting addition
    sudo yabai --uninstall-sa
    sudo yabai --install-sa

    # load the scripting addition
    killall Dock
  }

  alias cask-upgrade='brew-cask-upgrade'
  alias brew-cleanup='brew cleanup'
  alias brew-upgrade='brew update && brew upgrade && brew cleanup && check-keg_only'
  alias dist-upgrade='brew-upgrade && brew-cask-upgrade -y'
elif [[ "$OSTYPE" == *"android"* ]]; then
  alias apt-upgrade='apt update; apt full-upgrade'
  alias dist-upgrade=apt-upgrade
fi

function update-all-things() {
  npm-upgrade; gem-upgrade; pip3-upgrade; dist-upgrade; vim-update
  # if [ -x "$(command -v go)" ]; then
  #   go get -u all
  # fi
  if [ -x "$(command -v apm)" ]; then
    apm upgrade --no-confirm
  fi
  if [ -x "$(command -v mas)" ]; then
    mas upgrade
  fi
  if [ -x "$(command -v softwareupdate)" ]; then
    softwareupdate --install -a
  fi
  if [ -x "$(command -v vagrant)" ]; then
    vagrant plugin update
  fi
}

# Make open and xdg-open work on all plaforms
if ! [ -x "$(command -v open)" ]; then
  alias open='xdg-open'
elif ! [ -x "$(command -v xdg-open)" ]; then
  alias xdg-open='open'
fi
alias cygstart='open'

# Get all records from a domain
alias dig-all='dig +nocmd +multiline +noall +answer any'

alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias sysState="top -l 1 -s 0 | awk ' /Processes/ || /PhysMem/ || /Load Avg/{print}'"

alias cls='clear'

# Fix window title after ssh
function ssh() {
  if [[ "$TERM" =~ "screen" ]] && [ -n "$TMUX" ]; then
    command ssh "$@"
    tmux set-window-option automatic-rename "on" 1>/dev/null
  else
    command ssh "$@"
  fi
}

# key management aliases: fingerprint a pubkey and retrieve pubkey from a private key
alias fingerprint='ssh-keygen -lf'
alias pubkey='ssh-keygen -y -f'

alias headers='curl -ISs'

#Bash calculator.
function calc() {
  bc -l <<< "${1}";
}

# Bash weather app
function wttr() {
  curl "wttr.in/${1}"
}
alias wttr_moon='curl wttr.in/Moon'

# get external ip address
function ipinfo() {
  # we could also use curl ifconfig.co
  echo "Egress address: $(curl -s http://ipinfo.io/ip || echo 'Unable to connect!')"
  ip route get default 2>/dev/null || ip route ls
  ping -c 1 google.com >/dev/null 2>&1 && echo -e "Connection: ${COL_GREEN}✔${COL_RESET}" || echo -e "Connection: ${COL_RED}✘${COL_RESET}"
}

# get TLS cert info
function certinfo() {
  echo | openssl s_client -showcerts -servername ${1} -connect ${1}:443 2>/dev/null | openssl x509 -inform pem -noout -text
}

# get internet speed
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'

alias lstcp='lsof -nP | grep TCP | grep LISTEN'
alias lsudp='lsof -nP | grep UDP | grep LISTEN'
alias lsservers='lsof -nP | grep LISTEN'

alias netdata='docker run --rm --cap-add SYS_PTRACE -v /proc:/host/proc:ro -v /sys:/host/sys:ro -p 19999:19999 titpetric/netdata'

# Start a local grafana for dashboard development
alias grafana='docker run --rm -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" grafana/grafana'

function hgrep() {
  if [ ! -z "$1" ]; then
    grep "${1}" ~/.bash_eternal_history
  else
    history
  fi
}
alias histg='hgrep'

# fh - repeat history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

alias no-trail="ag --print0 -l '[ \t]+$' | xargs -0 -n1 -r perl -pi -e 's/[ \t]+$//'"

# Deduplicate path variables
get_var () {
  eval 'printf "%s\n" "${'"$1"'}"'
}

set_var () {
  eval "$1=\"\$2\""
}

dedup_pathvar () {
  pathvar_name="$1"
  pathvar_value="$(get_var "$pathvar_name")"
  deduped_path="$(perl -e 'print join(":",grep { not $seen{$_}++ } split(/:/, $ARGV[0]))' "$pathvar_value")"
  set_var "$pathvar_name" "$deduped_path"
}

# Simplified archive extraction
function extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ] ; then
      local nameInLowerCase=`echo "${1}" | awk '{print tolower($0)}'`
      case "$nameInLowerCase" in
        *.tar.bz2)   tar xvjf ./"$1"    ;;
        *.tar.gz)    tar xvzf ./"$1"    ;;
        *.tar.xz)    tar xvJf ./"$1"    ;;
        *.lzma)      unlzma ./"$1"      ;;
        *.bz2)       bunzip2 ./"$1"     ;;
        *.rar)       unrar x -ad ./"$1" ;;
        *.gz)        gunzip ./"$1"      ;;
        *.tar)       tar xvf ./"$1"     ;;
        *.tbz2)      tar xvjf ./"$1"    ;;
        *.tgz)       tar xvzf ./"$1"    ;;
        *.zip)       unzip ./"$1"       ;;
        *.Z)         uncompress ./"$1"  ;;
        *.7z)        7z x ./"$1"        ;;
        *.xz)        unxz ./"$1"        ;;
        *.exe)       cabextract ./"$1"  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "'$1' - file does not exist"
    fi
  fi
}

# https://github.com/idank/explainshell/issues/4#issuecomment-354709120
function explain-shell() {
  response=$(w3m -dump 'http://explainshell.com/explain?cmd='$(echo $@ | tr ' ' '+'}))
  cat -s <(grep -v -e explainshell -e • -e □ -e 'source manpages' <<< "$response")
}

