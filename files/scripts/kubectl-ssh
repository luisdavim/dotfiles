#!/usr/bin/env bash

# Script to use ssh with k8s nodes
# You need to have jq installed
# Examples:
#    kubectl-ssh -u myUser workernode-01
#    kubectl-ssh master-k8-01 uptime
# This script can be used as a kubectl plugin and invoked as a sub-command
#    kubectl ssh master-k8-01 uptime

# Defaults
DEBUG=false
USER=${USER:-ec2-user}
IP=InternalIP
IDENTITY=""
EC2=false

function usage {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") [<flags>] <node> [<command>]"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -e, --external-ip                     use the external IP'
  echo '  --ec2                                 use AWS mssh to connect'
  echo "  -u, --user <user>                     ssh user default: ${USER}"
  echo "  -i, --indentity <file>                Path to the identity file"
  echo ''
  exit 1
}

function nodeIP() {
  kubectl get no "${1}" -o json | jq -r '.status.addresses[] | select(.type=="'${IP}'") | .address'
}

function providerID() {
  basename "$(kubectl get no "${1}" -o json | jq -r '.spec.providerID')"
}

OPTS=$(getopt -o hdeu:i: --long help,debug,ec2,external-ip,user:,identity: -n "$(basename "$0")" -- "$@")

if [ $? != 0 ]; then usage "Terminating...\n" >&2; fi

eval set -- "$OPTS"

while true; do
  case "$1" in
  -h | --help) usage ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  --ec2)
    EC2=true
    shift
    ;;
  -e | --external-ip)
    IP=ExternalIP
    shift
    ;;
  -u | --user)
    USER="$2"
    shift 2
    ;;
  -i | --identity)
    IDENTITY="-i $2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

# Allow the file to be sourced without excuting this part
if [ "$0" = "${BASH_SOURCE[0]}" ]; then

  if ! [ -x "$(command -v jq)" ]; then
    echo -e "You need jq.\nTerminating...\n" >&2
    exit 1
  fi

  NODE="${1}"
  if [[ -z $NODE ]] && [[ -t 1 && -z ${IGNORE_FZF:-} && "$(
    type fzf &>/dev/null
    echo $?
  )" -eq 0 ]]; then
    echo 'Please select a node:'
    NODE=$(echo "$(kubectl get no | fzf --header-lines=1)" | awk '{print $1}')
  fi
  if [ -z "${NODE}" ]; then
    usage "You need to provide a node.\nTerminating...\n" >&2
  fi
  shift

  cmd=""
  if [[ ${EC2} == "true" ]]; then
    NODE=$(providerID "${NODE}")
    cmd="mssh ${NODE}"
  else
    NODE=$(nodeIP "${NODE}")
    cmd="ssh -o StrictHostKeyChecking=no ${IDENTITY} -l ${USER} ${NODE} ${*}"
  fi

  if [[ ${DEBUG} == "true" ]]; then
    echo "Executing: ${cmd}"
  fi
  if [[ ${DEBUG} == "true" ]]; then
    echo "${cmd}"
  fi
  eval "${cmd}"
fi
