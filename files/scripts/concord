#!/usr/bin/env bash

# https://concord.walmartlabs.com/
# Simple concord cli
# Examples:
# concord ssh us_us06971c1 uptime
# concord ssh us_us06971c1
# concord find_clusters 05260
# concord find_clusters scus cluster_id,ingress
# concord list_hosts us05260-vsp1 instanceName,ipaddress
# concord run deploy

# Defaults
DEBUG=false
SERVER_ADDR='concord.prod.walmart.com'
ORG='Default'
SYNC=false
SSH_USER=app

if [ -f "${HOME}/.config-concord-run" ]; then
  source "${HOME}/.config-concord-run"
fi

_isFunction() { declare -F -- "$@" >/dev/null; }

_get_desc() {
  grep "# $1:" "$(which $0)" | sed -e "s/$1://g"
}

_usage() {
  if [ -n "${1}" ] ; then
    echo -e "${1}"
    echo ''
  fi

  echo "Usage: $(basename $0) [<flags>] <command> [<command_args>]"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                          display help'
  echo '  -d, --debug                         enable debug output'
  echo '  -u, --user <user>                   concord user'
  echo '  -p, --pass <password>               concord password'
  echo '  -t, --token <token>                 concord token'
  echo ''
  echo 'Available commands:'
  for f in $(declare -F | cut -d' ' -f3 | grep -vE '^_'); do
    echo -e "  ${f}\t\t$(_get_desc $f)"
  done
  exit 1
}

_get_token() {
  if [ -n "$CONCORD_TOKEN" ]; then
    echo ${CONCORD_TOKEN}
    return 0
  fi

  if [ -n "$CONCORD_USER" ] && [ -n "$CONCORD_PASS" ]; then
    CURL_USER="${CONCORD_USER}:${CONCORD_PASS}"
  else
    read -p 'Username: ' CURL_USER
  fi
  CONCORD_TOKEN=$(curl -sku ${CURL_USER} \
    -H "Content-Type: application/json" \
    -d '{ "username": "'${CURL_USER%:*}'" }' \
    'https://concord.prod.walmart.com/api/v1/apikey' \
    | jq -r '.key')

  if [ -z "${CONCORD_TOKEN}" ]; then
    echo "Failed to get the concord token"
    return 1
  fi

  echo 'CONCORD_TOKEN="'$CONCORD_TOKEN'"' >> "${HOME}/.config-concord-run"
  echo $CONCORD_TOKEN
}

_open() {
  if [ -x "$(command -v open)" ]; then
    open $@
  elif [ -x "$(command -v xdg-open)" ]; then
    xdg-open $@
  else
    cygstart $@
  fi
}

# run: trigger a concord flow from the current PWD
function run() {
  ENTRY_POINT="${1:-deploy}"
  CLEAN_UP='true'

  rm -rf target && mkdir target

  find . -type f -not -path '*/\.git*' > filelist
  tar cf - --exclude ./test -T filelist | tar xf - -C ./target

  cd target && zip -r payload.zip ./* > /dev/null && cd ..

  INSTANCE_ID=$(curl -sk \
    -H "Authorization: $CONCORD_TOKEN" \
    -F org="${ORG}" \
    -F project=kubernetes \
    -F sync=${SYNC} \
    -F entryPoint="${ENTRY_POINT}" \
    -F archive="@target/payload.zip" \
    "https://${SERVER_ADDR}/api/v1/process" \
    | jq -r '.instanceId')

  if [ -z "${INSTANCE_ID}" ]; then
    echo "Failed to trigger the concord process"
    return 1
  fi

  url="https://${SERVER_ADDR}/#/process/${INSTANCE_ID}/log"
  echo $url
  _open "$url"

  if [[ "${CLEAN_UP}" == "true" ]]; then
    rm -rf target/ filelist
  fi
}

# find_clusters: Lookup clusters in the Concord Inventory
function find_clusters() {
  FILTER=${1}
  FIELDS=${2}
  QUERY='.[] | select(.cluster_id | contains("'${FILTER}'"))'

  if [ -n "${FIELDS}" ]; then
    QUERY="[${QUERY} | {${FIELDS}}]"
  fi

  if [[ "$DEBUG" == "true" ]]; then
    echo "Query: ${QUERY}"
  fi

  CLUSTERS=$(curl -sk \
    -XPOST -H "Content-Type: application/json" \
    -H "Authorization: $CONCORD_TOKEN" \
    -d '{}' \
    "https://${SERVER_ADDR}/api/v1/org/${ORG}/inventory/k8s-clusters/query/clusterLookupV2/exec" \
    | jq -r "${QUERY}")

  if [ -z "${CLUSTERS}" ]; then
    echo "Failed to get cluster list"
    return 1
  else
    echo $CLUSTERS | jq -r .
  fi
}

# list_clusters: List cluster names in Concord inventory
function list_clusters() {
  CLUSTERS=$(find_clusters | jq -r '.name')

  if [ -z "${CLUSTERS}" ]; then
    echo "Failed to get server list"
    return 1
  else
    echo $CLUSTERS | tr -s '[[:space:]]' '\n'
  fi
}

# get_vcenter: get the vsphere url for a cluster
function get_vcenter() {
  CLUSTER=$1
  FIELDS=${2}
  QUERY='.'

  if [ -z "$CLUSTER" ]; then
    echo 'Select a cluster:'
    CLUSTER=$(list_clusters | fzf)
  fi

  if [ -z "$CLUSTER" ]; then
    echo "You must provide a cluster id"
    exit 1
  fi

  VCENTER="https://$(find_clusters ${CLUSTER} | jq -r '.knobs.ipmi.vsphere_endpoint')"
  echo "${VCENTER}"
  _open "${VCENTER}"
}

# list_hosts: List hosts from a cluster in Concord inventory
function list_hosts() {
  CLUSTER=$1
  FIELDS=${2}
  QUERY='.'

  if [ -z "$CLUSTER" ]; then
    echo 'Select a cluster:'
    CLUSTER=$(list_clusters | fzf)
  fi

  if [ -z "$CLUSTER" ]; then
    echo "You must provide a cluster id"
    exit 1
  fi

  if [ -n "${FIELDS}" ]; then
    QUERY="[.[] | {${FIELDS}}]"
  fi

  HOSTS=$(curl -sk \
    -XPOST -H "Content-Type: application/json" \
    -H "Authorization: $CONCORD_TOKEN" \
    -d '{ "cluster_id": "'${CLUSTER}'" }' \
    "https://${SERVER_ADDR}/api/v1/org/${ORG}/inventory/k8s-infra/query/infraLookupV2/exec" \
    | jq -r "${QUERY}")

  if [ -z "${HOSTS}" ]; then
    echo "Failed to get server list"
    return 1
  else
    echo $HOSTS | jq -r .
  fi
}

# host_by_ip: Lookup a host by it's IP in concord inventory
function host_by_ip() {
  IP=${1}

  if [ -z "$IP" ]; then
    echo "You must provide an IP"
    exit 1
  fi

  QUERY='.[] | select(.ipaddress=="'"${IP}"'")'

  HOSTS=$(curl -sk \
    -XPOST -H "Content-Type: application/json" \
    -H "Authorization: $CONCORD_TOKEN" \
    -d '{}' \
    "https://${SERVER_ADDR}/api/v1/org/${ORG}/inventory/k8s-infra/query/infraLookupV2/exec" \
    | jq -r "${QUERY}")

  if [ -z "${HOSTS}" ]; then
    echo "Failed to get server list"
    return 1
  else
    echo $HOSTS | jq -r .
  fi
}

# ssh: Run ssh commands against hosts from a cluster
function ssh() {
  IP="$1"
  shift
  CMD="$@"

  if [[ $IP =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]]; then
    if [[ "$DEBUG" == "true" ]]; then
      echo "ssh -l ${SSH_USER} ${IP} ${CMD}"
    fi
    command ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "${SSH_USER}" "$IP" "$CMD"
    return 0
  fi

  if [ -z "${IP}" ]; then
    echo 'Select a cluster:'
    IP=$(list_clusters | fzf)
  fi

  if [ -z "${IP}" ]; then
    echo "You must provide a cluster id or IP address"
    exit 1
  fi

  IPS=$(list_hosts "${IP}" | jq -r '.[] | .ipaddress' | sed -e "s/^/${SSH_USER}@/g")

  if [ -z "$CMD" ]; then
    echo 'Select a host:'
    command ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $(echo -n "$IPS" | tr -s '[[:space:]]' '\n' | fzf)
    return 0
  fi

  echo -en "$IPS" | tr -s '[[:space:]]' '\n' > hosts.lst
  pssh -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no -i -h hosts.lst "${CMD}"
  rm hosts.lst
}

###############################
# MAIN
###############################

# Allow the file to be sourced without excuting this part so we can use the functions defined here in other scripts
if [ "$0" = "$BASH_SOURCE" ] ; then
  if ! [ -x "$(command -v getopt)" ]; then
    echo "Error: getopt command not fount!"
    echo "On a mac you can install it with 'brew install gnu-getopt'"
    exit 1
  fi

  if ! [ -x "$(command -v jq)" ]; then
    echo "Error: jq command not fount!"
    echo "On a mac you can install it with 'brew install jq'"
    exit 1
  fi

  OPTS=$(getopt -o hdu:p:t: --long help,debug,user:,pass:,token: -n "$(basename $0)" -- "$@")

  if [ $? != 0 ] ; then _usage "Terminating..." >&2 ; fi

  eval set -- "$OPTS"

  while true; do
    case "$1" in
      -h | --help ) _usage ;;
      -d | --debug ) DEBUG=true; shift ;;
      -u | --user ) CONCORD_USER="$2"; shift 2 ;;
      -p | --pass ) CONCORD_PASS="$2"; shift 2 ;;
      -t | --token ) CONCORD_TOKEN="$2"; shift 2 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  CONCORD_TOKEN=$(_get_token)
  command="${1:-_usage}"
  shift

  if [[ "$DEBUG" == "true" ]]; then
    echo "Command: ${command}"
  fi

  if _isFunction "${command}"; then
    $command ${@}
    exit $?
  else
    _usage "$(basename $0): Unrecognised command! -- ${command}\nTerminating..." >&2
  fi
fi
