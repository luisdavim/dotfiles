#!/usr/bin/env bash

DEBUG="false"
NAMESPACE="default"
IMAGE="ghcr.io/luisdavim/debug:main"
POSITIONAL=()

function usage() {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") [<flags>] <keyword>"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -n, --namespace <namespace>           on this namespace only'
  echo '  -i, --image <image>                   container image'
  exit 1
}

function ephemeralContainer() {
  pod_name="$1"
  container_name="$2"
  namespace="${3:-default}"
  image="${4:-ghcr.io/luisdavim/debug:main}"
  if [[ -z "${pod_name}" || -z "${container_name}" ]]; then
    echo "requires pod name as first argument and container name as second argument"
    return 1
  fi
  pod_json="$(kubectl -n "${namespace}" get pod "${pod_name}" -o json)"
  if [[ -z "${pod_json}" ]]; then
    echo "invalid pod"
    return 2
  fi
  volume_mounts="$(jq --arg CONTAINERNAME "${container_name}" '.spec.containers[] | select(.name==$CONTAINERNAME) | .volumeMounts | map(select(.subPath==null))' <<<"${pod_json}")"
  env_variables="$(jq --arg CONTAINERNAME "${container_name}" '.spec.containers[] | select(.name==$CONTAINERNAME) | .env' <<<"${pod_json}")"
  env_froms="$(jq --arg CONTAINERNAME "${container_name}" '.spec.containers[] | select(.name==$CONTAINERNAME) | .envFrom' <<<"${pod_json}")"
  exec 3< <(
    kubectl proxy --port=0 &
    echo $!
  )
  port_number=''
  kubectl_pid=''
  while [[ "${port_number}" == '' || "${kubectl_pid}" == '' ]]; do
    read -r -u 3 line
    if [[ "${kubectl_pid}" == '' && "${line}" =~ ^[0-9]+$ ]]; then
      kubectl_pid="${line}"
      continue
    elif [[ "${port_number}" == '' && "${line}" =~ :[0-9]+$ ]]; then
      port_number="$(grep -oE '[0-9]+$' <<<"${line}")"
      continue
    fi
  done

  ephemeral_container_name="debugger-${RANDOM}"
  patch_api_body="$(jq -r tostring <<EOF
  {
  "spec":
  {
    "ephemeralContainers":
    [
      {
        "name": "${ephemeral_container_name}",
        "command": ["sh"],
        "image": "${image}",
        "targetContainerName": "${container_name}",
        "stdin": true,
        "tty": true,
        "volumeMounts": ${volume_mounts},
        "envFrom": ${env_froms},
        "env": ${env_variables}
      }
    ]
  }
}
EOF
)"
  if [[ ${DEBUG} == "true" ]]; then
    echo "Patching with the following:"
    echo "${patch_api_body}"
  fi
  res=$(curl -s "http://localhost:${port_number}/api/v1/namespaces/${namespace}/pods/${pod_name}/ephemeralcontainers" -X PATCH -H 'Content-Type: application/strategic-merge-patch+json' --data-binary "${patch_api_body}")
  if [[ ${DEBUG} == "true" ]]; then
    echo "${res}"
  fi
  kill "${kubectl_pid}"

  try=1
  while [[ "$(kubectl -n "${namespace}" get pod "${pod_name}" -o jsonpath='{.status.ephemeralContainerStatuses}' | jq --arg EPHEMERALCONTAINERNAME "${ephemeral_container_name}" -r 'map(select(.name==$EPHEMERALCONTAINERNAME))[0].state | has("running")')" != 'true' ]]; do
    echo 'Ephemeral container still not running...'
    sleep 1
    ((try++))
    if [[ ${try} -gt 30 ]]; then
      echo 'Waiting for ephemeral container to be running timed out.'
      return 3
    fi
  done

  kubectl -n "${namespace}" attach "${pod_name}" -c "${ephemeral_container_name}" -it
}

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h | --help) usage "" ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -n | --namespace)
    NAMESPACE="$2"
    shift 2
    ;;
  -i | --image)
    IMAGE="$2"
    shift 2
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ ${DEBUG} == "true" ]]; then
    echo "adding ephemeral container to ${1} on ${NAMESPACE} with image ${IMAGE}"
fi

ephemeralContainer "${1}" "${2}" "${NAMESPACE}" "${IMAGE}"
