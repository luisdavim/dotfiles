#!/usr/bin/env bash

# Script to run etcdctl commands in the etcd pods
# This script can be used as a kubectl plugin and invoked as a sub-command
# Examples:
#   kubectl etcdctl compact

function usage() {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") [<flags>] <keyword>"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -m, --etcd-manager                    use etcd-manager'
  echo '  -n, --namespace <namespace>           kube-system is used by default'
  echo '  -p, --pod <pod>                       specify the pod to use'
  echo '  -c, --command <command>               endpoint command, defaults to etcdctl'
  echo '  -s, --script <script>                 read the commands to run from a script file'
  echo ''
  exit 1
}

export NAMESPACE="kube-system"
ETCD_MANAGER="false"
ETCD_POD=""

DEBUG="false"
POSITIONAL=()

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h | --help) usage "" ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -m | --etcd-manager)
    ETCD_MANAGER=true
    shift
    ;;
  -n | --namespace)
    NAMESPACE="$2"
    shift 2
    ;;
  -p | --pod)
    ETCD_POD="$2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *)
    POSITIONAL+=("$1")
    shift
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

pod='$(kubectl get po -n ${NAMESPACE} -l component=etcd -o name | head -n1)'

read -r -d '' cmd_prefix <<'EOF'
export ETCDCTL_API=3
alias etcdctl='etcdctl --command-timeout=120s --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --endpoints=https://127.0.0.1:2379'
EOF

if [[ ${ETCD_MANAGER} == "true" ]]; then
  pod='$(kubectl get po -n ${NAMESPACE} -l k8s-app=etcd-manager-main -o name | head -n1)'
  read -r -d '' cmd_prefix <<'EOF'
export ETCDCTL_API=3
export DIRNAME="/opt/$(ls /opt -1 | tail -n 1)"
export CERTDIR=/rootfs/srv/kubernetes/kube-apiserver/
alias etcdctl="$DIRNAME/etcdctl --cacert=$CERTDIR/etcd-ca.crt --cert=$CERTDIR/etcd-client.crt --key=$CERTDIR/etcd-client.key --endpoints=https://127.0.0.1:4001"
EOF
fi

if [[ -n "${ETCD_POD}" ]]; then
  pod="${ETCD_POD}"
else
  pod=$(eval echo "${pod}")
fi

if [[ -z "${pod}" ]]; then
  echo "could not find etcd pod"; exit 1
fi

k8s_cmd="kubectl exec -i --stdin ${pod} -n ${NAMESPACE} -- sh"

case ${1} in
  'compact')
    read -r -d '' cmd <<'EOF'
rev=$(etcdctl endpoint status -w json | egrep -o '"revision":[0-9]*' | egrep -o '[0-9]*')
etcdctl compact $rev
etcdctl defrag
etcdctl alarm disarm
EOF
    ;;
  'count')
    read -r -d '' cmd <<'EOF'
etcdctl get /registry --prefix=true --keys-only | grep -v ^$ | awk -F'/' '{ if ($3 ~ /\./) {h[$3"/"$4]++} else { h[$3]++ }} END { for(k in h) print h[k], k }' | sort -n
EOF
    ;;
  '-s' | '--script')
    shift
    cmd="$(cat "${1}")"
    ;;
  '-c' | '--command')
    shift
    cmd="${*}"
    ;;
  'etcdctl')
    cmd="${*}"
    ;;
  *)
    cmd="etcdctl ${*}"
    ;;
esac

printf -v cmd "cat << 'EOF' | %s\n%s\n%s\nEOF" "${k8s_cmd}" "${cmd_prefix}" "${cmd}"

if [[ ${DEBUG} == "true" ]]; then
  echo -e "Running:\n${cmd}\n"
fi

eval "${cmd}"
