#!/usr/bin/env bash

# Script to execute commands on k8s nodes over ssh using pssh
# You need to have pssh and jq installed
# Examples:
#    kubectl-pssh 'sudo docker system prune -a -f'
#    kubectl-pssh -u myUser 'sudo docker system prune -a -f'
#    kubectl-pssh -f ko 'sudo systemctl restart docker'
# This scritp can be used as a kubectl plugin and invoked as a sub-command
#    kubectl pssh -u myUser 'sudo docker system prune -a -f'

# Defaults
DEBUG=false
NODES=all
USER=app
IP=InternalIP
TIMEOUT=0

function usage {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") [<flags>] <command>"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -e, --external-ip                     use the external IP'
  echo "  -f, --filter <all|healthy|unhealthy>  Filter nodes by their state default: ${NODES}"
  echo "  -u, --user <user>                     ssh user default: ${USER}"
  echo "  -t, --timeout <seconds>               kill ssh process after <seconds> default: ${TIMEOUT}"
  echo '                                        setting timeout to 0 disables it'
  echo ''
  exit 1
}

function inventory() {
  ip='ip:(.status.addresses[] | select(.type=="'${IP}'")| .address)'
  status='status:(.status.conditions[] | select(.type=="Ready") | .status)'
  query="[.items[] | {name:.metadata.name, ${ip}, ${status}}]"
  nodes=$(kubectl get no -o json | jq -r "${query}")

  case "${NODES,,}" in
  "healthy" | "ok" | "ready")
    nodes=$(echo "$nodes" | jq -r '.[] | select(.status=="True") | "app@"+.ip')
    ;;
  "unhealthy" | "ko" | "notready")
    nodes=$(echo "$nodes" | jq -r '.[] | select(.status!="True") | "app@"+.ip')
    ;;
  "all")
    nodes=$(echo "$nodes" | jq -r '.[] | "app@"+.ip')
    ;;
  *)
    nodes=$(echo "$nodes" | jq -r '.[] | select(.name|contains("'${NODES}'")) | "app@"+.ip')
    ;;
  esac
  echo -ne "${nodes}" | tr -s '[[:space:]]' '\n'
}

OPTS=$(getopt -o hdef:u:t: --long help,debug,external-ip,filter:,user:,timeout: -n "$(basename "$0")" -- "$@")

if [ $? != 0 ]; then usage "Terminating...\n" >&2; fi

eval set -- "$OPTS"

while true; do
  case "$1" in
  -h | --help) usage ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -e | --external-ip)
    IP=ExternalIP
    shift
    ;;
  -f | --filter)
    NODES="$2"
    shift 2
    ;;
  -u | --user)
    USER="$2"
    shift 2
    ;;
  -t | --timeout)
    TIMEOUT="$2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

# Allow the file to be sourced without excuting this part
if [ "$0" = "$BASH_SOURCE" ]; then
  CMD="${@}"
  if [ -z "${CMD}" ]; then
    usage "You need to provide a command.\nTerminating...\n" >&2
    exit 1
  fi

  if ! [ -x "$(command -v jq)" ]; then
    echo -e "You need jq.\nTerminating...\n" >&2
    exit 1
  fi
  if ! [ -x "$(command -v pssh)" ]; then
    echo -e "You need pssh.\nTerminating...\n" >&2
    exit 1
  fi

  tmpfile=$(mktemp /tmp/pssh_hosts.XXXXXX)
  inventory >"${tmpfile}"
  sed -i '/^[[:blank:]]*$/ d' "${tmpfile}"
  if [[ "${DEBUG}" == "true" ]]; then
    echo "Hosts list:"
    cat "${tmpfile}"
    echo ''
  fi
  if ! [ -s "${tmpfile}" ]; then
    echo -e "No hosts found!\n" >&2
    exit 1
  fi
  pssh -O StrictHostKeyChecking=no -t "${TIMEOUT}" -i -h "${tmpfile}" "${CMD}"
  rm "${tmpfile}"
fi
